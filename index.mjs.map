{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isFunction from '@stdlib/assert-is-function';\nimport { ndarray as strided } from '@stdlib/stats-strided-range-by';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Computes the range of an array via a callback function.\n*\n* @param {Collection} x - input array\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be a function\n* @returns {number} range\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = rangeBy( x, accessor );\n* // returns 18.0\n*/\nfunction rangeBy( x, clbk, thisArg ) {\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'null2O', x ) );\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'null2H', clbk ) );\n\t}\n\treturn strided( x.length, x, 1, 0, wrapper );\n\n\t/**\n\t* Invokes a provided callback.\n\t*\n\t* @private\n\t* @param {*} value - current element\n\t* @param {NonNegativeInteger} aidx - current array index\n\t* @param {NonNegativeInteger} sidx - current strided index\n\t* @param {Collection} arr - input array\n\t* @returns {number} callback return value\n\t*/\n\tfunction wrapper( value, aidx, sidx, arr ) {\n\t\treturn clbk.call( thisArg, value, aidx, arr );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default rangeBy;\n"],"names":["rangeBy","x","clbk","thisArg","isCollection","TypeError","format","isFunction","strided","length","value","aidx","sidx","arr","call"],"mappings":";;kYAkDA,SAASA,EAASC,EAAGC,EAAMC,GAC1B,IAAMC,EAAcH,GACnB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAExC,IAAMM,EAAYL,GACjB,MAAM,IAAIG,UAAWC,EAAQ,SAAUJ,IAExC,OAAOM,EAASP,EAAEQ,OAAQR,EAAG,EAAG,GAYhC,SAAkBS,EAAOC,EAAMC,EAAMC,GACpC,OAAOX,EAAKY,KAAMX,EAASO,EAAOC,EAAME,EACxC,GACF"}